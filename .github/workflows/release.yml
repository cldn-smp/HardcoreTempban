name: Build and Upload Jar

on:
  release:
    types:
      - published

jobs:
  build-and-upload-jar:
    name: Build and Upload Jar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Build Jar
        run: |
          mvn clean package
          echo "::set-output name=jar_files::$(find ./target -name '*.jar' -type f -not -name 'original-*.jar')"

      - name: Get Release ID
        id: get_release
        run: |
          echo "::set-output name=release_id::$(curl -s -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref }} | jq -r '.id')"

      - name: Upload Jar to Release
        id: upload_jar
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }}/assets{?name,label}
          asset_path: ${{ steps.build-jar.outputs.jar_files }}
          asset_name: ${{ steps.build-jar.outputs.jar_files }}
          asset_content_type: application/java-archive

      - name: Check for Original Jar
        id: check_original_jar
        run: |
          if [[ -f "./target/original-*.jar" ]]; then
            echo "::set-output name=original_jar_found::true"
          else
            echo "::set-output name=original_jar_found::false"
          fi

      - name: Delete Original Jar
        if: steps.check_original_jar.outputs.original_jar_found == 'true'
        run: |
          rm -f "./target/original-*.jar"
